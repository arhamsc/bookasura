import Head from 'next/head';

import styles from '../styles/Home.module.css';



import { getRandom } from '../utils/random_array_ele';
import { fetchAllBooks } from '../helpers/from-end/products_prop_funcs';


import Banner from '../components/Functional/Home/Banner/Banner';
import ProductShowcase from '../components/Functional/Home/ProductShowcase/ProductShowcase';
import Quote from '../components/Functional/Home/Quote/Quote';
import CategoryNavigation from '../components/Functional/Home/CategoryNavigation/CategoryNavigation';
import { useEffect } from 'react';

export default function Home({ popularBooks }) {
  useEffect(() => {
    const checkTimer = async () => {
      const timer = localStorage.getItem('timerId');
      const expiryDate = localStorage.getItem('expiryDate');
      if (Date.now() > expiryDate) {
        clearTimeout(timer);
        localStorage.removeItem('timerId');
        localStorage.removeItem('expiryTime');
        localStorage.removeItem('expiryDate');
        localStorage.removeItem('token');
      }
    };
    checkTimer();
  }, []);
  return (
    <div className={styles.container}>
      <Head>
        <title>Bookasura</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Banner />
        <ProductShowcase popularBooks={popularBooks} />
        <Quote />
        <CategoryNavigation />
      </main>
    </div>
  );
}

export const getServerSideProps = async () => {
  // await dbConnect();

  // const products = await Product.find({})
  //   .populate({
  //     path: 'category',
  //     model: Category,
  //     select: { _id: 1, name: 1 },
  //   })
  //   .populate({
  //     path: 'inventory',
  //     model: Inventory,
  //     select: { _id: 1, quantity: 1 },
  //   });

  //   const books = JSON.parse(JSON.stringify(products))

  const { books } = await fetchAllBooks();
  const popularBooks = getRandom(books, 4);

  return {
    props: {
      popularBooks,
      books,
    },
    revalidate: 86400,
  };
};
